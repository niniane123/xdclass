# 什么是多态？
#   多态是指一类事物有多种形态（一个抽象类有多个子类，而多态的概念依赖于继承）
# 定义： 多态是一种使用对象的方式，子类重写父类的方法，调用不同子类对象的相同父类方法可以产生不同的执行结果
# 好处：调用灵活、有了多态更容易编写出通用的代码，作出通用的编程，以适应需求的不断变化
# 不就是面向接口编程吗，同一个接口有不同的实现对象，我们可以灵活的传递不同的对象用相同的接口接受；

# 实现步骤
# 定义父类 提供公共方法
# 定义子类并重写父类方法
# 传递子类对象给调用者，可以看到不同子列执行效果不同


# 代码体验
class Dog(object):
    def work(self):
        pass


class ArmyDog(Dog):
    def work(self):
        print("追踪犬正在工作")


class DrugDog(Dog):
    def work(self):
        print("缉毒犬正在工作")


# 多态的存在使得这个类的方法更加通用，程序的扩展性更好，就是我们常说的面向接口编程
class Person():
    # 这边就用用到了多态，dog参数实际上再正常范围理解内是Dog类型
    def work_with_dog(self, dog):
        dog.work()


army_dog = ArmyDog()
drug_dog = DrugDog()

person = Person()
# 这就是多态的表达：我们可以传入不同的对象（只要调用的不同对象的）Java中我们需要用接口类型来指定参数名，但是python中做了更加简化，但是本质都是一样的，
# 我们都是再具体的逻辑实现的时候用父类（或者接口类型去接收）

# 不同的对象传入方法中，得到不同的结果
person.work_with_dog(army_dog)
person.work_with_dog(drug_dog)

# 需求分析：有几个类就看有几个事物，把事务向上归类即可 所以人一类，警察一类

