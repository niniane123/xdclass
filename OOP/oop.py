# 封装：对象属性私有化，同时对外提供可以被外界访问的方法
# 继承：使用已经存在的类的定义，作为新的类的基础，新的类在此基础上扩展，并且拥有原有父类的能力，不能选择性的继承，方便复用代码
# 多态：本质上也是通过继承来获得多态的能力，不同子类对象调用相同的父类方法产生不同的执行结果,增加代码的灵活度

# 对象、私有化、方法、类、父类、继承

# 类和对象是两种以计算机为载体的计算机语言的合称

# 对象是对客观事物的抽象、类是对对象的抽象、类是一种抽象的数据类型

# 类是生成对象的模具，类是对对象的抽象，一般来讲类中都是抽象的概念，不会给属性具体的赋值
# 对象，是我们生成的产品，里面一些属性是具体的，填充好的
# 类的命名方式：驼峰命名
class Person():
    # 类中所有的实例方法都需要有self关键字
    def introduce_self(self):
        print("my name is xxx")


# 类的实例化——对象
zhang_san = Person()
print(id(zhang_san))
zhang_san.introduce_self()

lisi = Person()
print(id(lisi))
