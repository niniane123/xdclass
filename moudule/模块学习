模块
python模块是一个python文件，以.py结尾，包含了python对象定义和python语句，模块能定义函数、类和变量；模块里面也能包含可执行的代码

导入模块的方式
import 模块名
from 模块名 import 功能名
from 模块名 import *
import 模块名 as   别名

别名的定义方法
from 模块名 import 功能名 as 别名

总结：
from 和模块名搭配
import 和功能名搭配 也可以和模块名搭配；


制作模块
    在python中每个python文件都可以作为一个模块，模块的名字就是文件的名字；也就是说自定义模块名必须要符合标识符命名规则
    我们自己制作的模块是我们项目下需要频繁使用的功能是为了简化开发流程而制作的

# 模块的定位顺序
当导入一个模块的时候，python解释器对模块位置的搜索顺序是：
    1.当前目录
    2.如果不在当前目录的话，python会搜索在sheLl变量下PYTHONPATH下的每个目录
    3.如果找不到Python会查看默认路径，unix下默认路径为/usr/local/lib/python
    模块的搜索路径存储在system模块的sys.path变量中；变量里面包含当前目录，PYTHONPATH和由安装过程决定的默认目录
注意:
    自己的文件名不要和已有的模块名重复，否则导致模块功能无法调用；因为python解释器的查找路径方式是由近及远的过程
    后来者居上：使用from 模块名 import 功能的时候，如果功能名字和重复，调用到的是最后定义或导入的功能
              1.导入的多个模块中有同名的函数，谁后导入谁优先
              2.导入模块中的函数和自定义函数重名，谁后导入谁优先
    案例：
        from  time import sleep
        def sleep():
            print("这是自定义的sleep")
        # 其实这里调用的是自定义的sleep()方法
        sleep(2)


# 名字重复的坏处
    1.导入的多个模块中有同名的函数，谁后导入谁优先
    2.导入模块中的函数和自定义函数重名，谁后导入谁优先
    3.自己的文件名不要和已有的模块名重复，否则导致模块功能无法调用


__all__
如果一个模块文件中有__all__变量，当使用from xxx import * 导入的时候，只能导入这个列表中的元素
控制的是from xxx import * 这个导入语句




