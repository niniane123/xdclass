def test_make_module():
    print("this is my module")


# __name__：模块标识符 如果__name__使用位置在模块本身内，__name__的值为"__main__"，否则为模块名
# 使用场景 只在当前文件中调用该函数，其他导入的文件内不符合该条件，则不执行test_make_module()函数

"""
这个 __name__ 拿来做什么的？
    作为 Python 的内置变量，__name__变量（前后各有两个下划线）还是挺特殊的。它是每个 Python 模块必备的属性，但它的值取决于你是如何执行这段代码的。
    在许多情况下，你的代码不可能全部都放在同一个文件里，或者你在这个文件里写的函数，在其他地方也可以用到。为了更高效地重用这些代码，你需要在 Python 程序中导入来自其他文件的代码。
    所以，在__name__ 变量的帮助下，你可以判断出这时代码是被直接运行，还是被导入到其他程序中去了。
    这个 __name__ 变量可能取什么值？
    当你直接执行一段脚本的时候，这段脚本的 __name__变量等于 '__main__'，当这段脚本被导入其他程序的时候，__name__ 变量等于脚本本身的名字。
"""
if __name__ == "__main__":
    test_make_module()

print(__name__)








